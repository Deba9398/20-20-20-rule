{"version":3,"sources":["workers/timer-worker.js","workers/worker-setup.js","components/Checkbox.js","components/SoundSelector.js","components/Timer.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["timer_worker","tickBreakTime","self","remainingTicks","postUpdateMessage","clearInterval","countdown","setupScreenTimeCountdown","tickScreenTime","timerBreakTimeTicks","mode","setInterval","timerScreenTimeTicks","postMessage","addEventListener","e","data","WebWorker","worker","Object","classCallCheck","this","code","toString","blob","Blob","Worker","URL","createObjectURL","Checkbox","react_default","a","createElement","className","disabled","props","isDisabled","id","name","inputName","type","checked","isChecked","onChange","htmlFor","labelText","React","Component","SOUNDS","file","audioObject","play","_this","options","map","o","key","value","onClick","playSound","TIMER_SCREEN_TIME","Timer","possibleConstructorReturn","getPrototypeOf","call","newWorker","notificationsPermitted","Notification","permission","soundFileName","handleTimerEvent","state","displayNotifications","getAudioObject","Audio","concat","setState","document","title","Math","ceil","message","event","_this2","target","requestPermission","then","alert","_this3","total","percentComplete","seconds","minutes","floor","width","height","viewBox","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","slice","startTimer","stopTimer","components_Checkbox","onDisplayNotificationsChange","onPlaySoundChange","SoundSelector","soundFile","onChangeSound","About","href","App","src_components_Timer","src_components_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSACeA,SAAA,WACX,SAASC,IACLC,KAAKC,iBACLC,IAE4B,IAAxBF,KAAKC,iBACLE,cAAcH,KAAKI,WACnBC,KAIR,SAASC,IACLN,KAAKC,iBACLC,IAE4B,IAAxBF,KAAKC,iBACLE,cAAcH,KAAKI,WAYvBJ,KAAKC,eAAiBD,KAAKO,oBAC3BP,KAAKQ,KAAO,QACZR,KAAKI,UAAYK,YAAYV,EAAe,MAGhD,SAASM,IACLL,KAAKC,eAAiBD,KAAKU,qBAC3BV,KAAKQ,KAAO,aACZR,KAAKI,UAAYK,YAAYH,EAAgB,KAGjD,SAASJ,IACLF,KAAKW,YAAY,CACbH,KAAMR,KAAKQ,KACXP,eAAgBD,KAAKC,iBAI7BD,KAAKY,iBACD,UACA,SAAUC,GACc,UAAhBA,EAAEC,KAAKN,MACPR,KAAKU,qBAAuBG,EAAEC,KAAKJ,qBACnCV,KAAKO,oBAAsBM,EAAEC,KAAKP,oBAClCF,MA9BRF,cAAcH,KAAKI,WACnBJ,KAAKQ,KAAO,UACZR,KAAKC,eAAiBD,KAAKU,sBAkCvBR,MAEJ,KC7Daa,EACjB,SAAAA,EAAYC,GAASC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GACnB,IAAMK,EAAOJ,EAAOK,WACdC,EAAO,IAAIC,KAAK,CAAC,IAAMH,EAAO,QACpC,OAAO,IAAII,OAAOC,IAAIC,gBAAgBJ,KCiB7BK,mLAhBP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBC,SAAUb,KAAKc,MAAMC,YACnDN,EAAAC,EAAAC,cAAA,SACIK,GAAIhB,KAAKc,MAAME,GACfC,KAAMjB,KAAKc,MAAMI,UACjBC,KAAK,WACLN,SAAUb,KAAKc,MAAMC,WACrBK,QAASpB,KAAKc,MAAMO,UACpBC,SAAUtB,KAAKc,MAAMQ,WAEzBb,EAAAC,EAAAC,cAAA,SAAOY,QAASvB,KAAKc,MAAME,IAAKhB,KAAKc,MAAMU,mBAbpCC,IAAMC,WCAhBC,EAAS,CAClB,CAAEV,KAAM,QAASW,KAAM,aACvB,CAAEX,KAAM,OAAQW,KAAM,YACtB,CAAEX,KAAM,QAASW,KAAM,aACvB,CAAEX,KAAM,OAAQW,KAAM,aA8BXpB,sLAxBPR,KAAKc,MAAMe,YAAYC,wCAGlB,IAAAC,EAAA/B,KACCgC,EAAUL,EAAOM,IAAI,SAAAC,GAAC,OAAIzB,EAAAC,EAAAC,cAAA,UAAQwB,IAAKD,EAAEN,KAAMQ,MAAOF,EAAEN,MAAOM,EAAEjB,QAEvE,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UACIyB,MAAOpC,KAAKc,MAAMsB,MAClBpB,GAAIhB,KAAKc,MAAME,GACfC,KAAMjB,KAAKc,MAAMI,UACjBL,SAAUb,KAAKc,MAAMC,WACrBO,SAAUtB,KAAKc,MAAMQ,UAEpBU,GAELvB,EAAAC,EAAAC,cAAA,SAAOY,QAASvB,KAAKc,MAAME,IAAKhB,KAAKc,MAAMU,WAC3Cf,EAAAC,EAAAC,cAAA,UAAQE,SAAUb,KAAKc,MAAMC,WAAYsB,QAAS,kBAAMN,EAAKO,cAA7D,mBArBOb,IAAMC,WCDhBa,EAAoB,GA6IlBC,cAxIX,SAAAA,EAAY1B,GAAO,IAAAiB,EAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,GACfT,EAAAjC,OAAA2C,EAAA,EAAA3C,CAAAE,KAAAF,OAAA4C,EAAA,EAAA5C,CAAA0C,GAAAG,KAAA3C,KAAMc,IAEN,IAAM8B,EAAY,IAAIhD,EAAUC,GAC1BgD,EAAqD,YAA5BC,aAAaC,WACtCC,EAAgBrB,EAAO,GAAGC,KALjB,OAOfgB,EAAUnD,iBAAiB,UAAW,SAACC,GAAD,OAAOqC,EAAKkB,iBAAiBvD,KAEnEqC,EAAKmB,MAAQ,CACTrD,OAAQ+C,EACRvD,KAAM,UACNP,eAAgByD,EAChBY,qBAAsBN,EACtBP,WAAW,EACXU,gBACAnB,YAAaE,EAAKqB,eAAeJ,IAhBtBjB,8EAoBJiB,GACX,OAAO,IAAIK,MAAJ,WAAAC,OAAqBN,6CAGftD,GAIb,GAHAM,KAAKuD,SAAS7D,EAAEC,MAChB6D,SAASC,MAAwB,YAAhB/D,EAAEC,KAAKN,KAAqB,gBAA5B,GAAAiE,OAAiDI,KAAKC,KAAK3D,KAAKkD,MAAMpE,eAhCrE,IAgCD,YAEiB,IAA9BkB,KAAKkD,MAAMpE,eAAsB,CACjC,GAAIkB,KAAKkD,MAAMC,qBAAsB,CACjC,IAAMS,EAA8B,eAApB5D,KAAKkD,MAAM7D,KAAwB,6CAA+C,kBAClG,IAAIyD,aAAac,GAGjB5D,KAAKkD,MAAMZ,WACXtC,KAAKkD,MAAMrB,YAAYC,6CAM/B,IAAM8B,EAAU,CACZvE,KAAM,QACNE,qBAAsBgD,EACtBnD,oBAhDoB,GAmDxBY,KAAKkD,MAAMrD,OAAOL,YAAYoE,uCAI9B5D,KAAKkD,MAAMrD,OAAOL,YAAY,6DAGLqE,GAAO,IAAAC,EAAA9D,KAC5B6D,EAAME,OAAO3C,SAAuC,YAA5B0B,aAAaC,YACrCD,aAAakB,oBAAoBC,KAAK,SAAClB,GAChB,YAAfA,EACAe,EAAKP,SAAS,CAAEJ,qBAAsBU,EAAME,OAAO3C,WAGnD8C,MAAM,oDACNJ,EAAKP,SAAS,CAAEJ,sBAAsB,OAKlDnD,KAAKuD,SAAS,CAAEJ,qBAAsBU,EAAME,OAAO3C,oDAGrCyC,GACd7D,KAAKuD,SAAS,CAAEjB,UAAWuB,EAAME,OAAO3C,gDAG9ByC,GACV,IAAMb,EAAgBa,EAAME,OAAO3B,MAEnCpC,KAAKuD,SAAS,CACVP,gBACAnB,YAAa7B,KAAKoD,eAAeJ,sCAIhC,IAAAmB,EAAAnE,KACCoE,EAA4B,eAApBpE,KAAKkD,MAAM7D,KAAwBkD,EAxFzB,EAyFlB8B,EAAkBrE,KAAKkD,MAAMpE,eAAiBsF,EAAQ,IACtDE,EAAUtE,KAAKkD,MAAMpE,eA5FT,GA6FZyF,EAAUb,KAAKc,MAAMxE,KAAKkD,MAAMpE,eA7FpB,IA+FlB,OACI2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAK8D,MAAM,OAAOC,OAAO,OAAOC,QAAQ,YAAY/D,UAAU,SAC1DH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAagE,GAAG,KAAKC,GAAG,KAAKC,EAAE,oBAAoBC,KAAK,gBAC1EtE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAagE,GAAG,KAAKC,GAAG,KAAKC,EAAE,oBAAoBC,KAAK,cAAcC,OAAO,YAAYC,YAAY,MAEvHxE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBgE,GAAG,KAAKC,GAAG,KAAKC,EAAE,oBAAoBC,KAAK,cAAcC,OAAO,YAAYC,YAAY,IAAIC,gBAAe,GAAA5B,OAAK,IAAMe,EAAX,KAAAf,OAA8Be,GAAmBc,iBAAiB,QAEnN1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,GAAA0C,OAAgCiB,EAAhC,KAAAjB,QAA4C,IAAMgB,GAASc,OAAO,KAC5C,YAApBpF,KAAKkD,MAAM7D,KACPoB,EAAAC,EAAAC,cAAA,UAAQ0B,QAAS,kBAAM8B,EAAKkB,eAA5B,SACA5E,EAAAC,EAAAC,cAAA,UAAQ0B,QAAS,kBAAM8B,EAAKmB,cAA5B,UAId7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC4E,EAAD,CACI/D,UAAU,wBACVN,UAAU,uBACVF,GAAG,uBACHK,UAAWrB,KAAKkD,MAAMC,qBACtB7B,SAAU,SAAC5B,GAAD,OAAOyE,EAAKqB,6BAA6B9F,MAEvDe,EAAAC,EAAAC,cAAC4E,EAAD,CACI/D,UAAU,aACVN,UAAU,YACVF,GAAG,YACHK,UAAWrB,KAAKkD,MAAMZ,UACtBhB,SAAU,SAAC5B,GAAD,OAAOyE,EAAKsB,kBAAkB/F,MAE5Ce,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAC+E,EAAD,CACItD,MAAOpC,KAAKkD,MAAMyC,UAClB5E,YAAaf,KAAKkD,MAAMZ,UACxBT,YAAa7B,KAAKkD,MAAMrB,YACxBP,SAAU,SAAC5B,GAAD,OAAOyE,EAAKyB,cAAclG,gBAjI5C+B,IAAMC,WCYXmE,0LAlBP,OACIpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,iNACAF,EAAAC,EAAAC,cAAA,qHACAF,EAAAC,EAAAC,cAAA,gMAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,gBAAOF,EAAAC,EAAAC,cAAA,KAAGmF,KAAK,uEAAR,oCAAP,KAA2HrF,EAAAC,EAAAC,cAAA,KAAGmF,KAAK,oDAAR,wCAA3H,SAAoOrF,EAAAC,EAAAC,cAAA,KAAGmF,KAAK,iEAAR,qCAApO,0DACArF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGmF,KAAK,+DAAR,WAAH,wMAbArE,IAAMC,YCgBXqE,0LAXX,OACEtF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gEACAF,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,gBAAV,yCAA2DF,EAAAC,EAAAC,cAAA,gBAA3D,kBAAqFF,EAAAC,EAAAC,cAAA,gBAArF,YACAF,EAAAC,EAAAC,cAACqF,EAAD,MACAvF,EAAAC,EAAAC,cAACsF,EAAD,cARUxE,IAAMC,YCOJwE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASjD,SAASkD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.252d9a70.chunk.js","sourcesContent":["/* eslint-disable */\nexport default () => {\n    function tickBreakTime() {\n        self.remainingTicks--;\n        postUpdateMessage();\n\n        if (self.remainingTicks === 0) {\n            clearInterval(self.countdown);\n            setupScreenTimeCountdown();\n        }\n    }\n\n    function tickScreenTime() {\n        self.remainingTicks--;\n        postUpdateMessage();\n\n        if (self.remainingTicks === 0) {\n            clearInterval(self.countdown);\n            setupBreakTimeCountdown();\n        }\n    }\n\n    function stop() {\n        clearInterval(self.countdown);\n        self.mode = 'stopped';\n        self.remainingTicks = self.timerScreenTimeTicks;\n    }\n\n    function setupBreakTimeCountdown() {\n        self.remainingTicks = self.timerBreakTimeTicks;\n        self.mode = 'break';\n        self.countdown = setInterval(tickBreakTime, 1000);\n    }\n\n    function setupScreenTimeCountdown() {\n        self.remainingTicks = self.timerScreenTimeTicks;\n        self.mode = 'screenTime';\n        self.countdown = setInterval(tickScreenTime, 1000);\n    }\n\n    function postUpdateMessage() {\n        self.postMessage({\n            mode: self.mode,\n            remainingTicks: self.remainingTicks\n        });\n    }\n\n    self.addEventListener(\n        \"message\",\n        function (e) {\n            if (e.data.mode === 'start') {\n                self.timerScreenTimeTicks = e.data.timerScreenTimeTicks;\n                self.timerBreakTimeTicks = e.data.timerBreakTimeTicks;\n                setupScreenTimeCountdown();\n            }\n            else {\n                stop();\n            }\n\n            postUpdateMessage();\n        },\n        false\n    );\n\n};\n","export default class WebWorker {\n    constructor(worker) {\n      const code = worker.toString();\n      const blob = new Blob([\"(\" + code + \")()\"]);\n      return new Worker(URL.createObjectURL(blob));\n    }\n  }","import React from 'react';\n\nclass Checkbox extends React.Component {\n\n    render() {\n        return (\n            <div className=\"checkbox-wrapper\" disabled={this.props.isDisabled}>\n                <input\n                    id={this.props.id}\n                    name={this.props.inputName}\n                    type=\"checkbox\"\n                    disabled={this.props.isDisabled}\n                    checked={this.props.isChecked}\n                    onChange={this.props.onChange} \n                />\n                <label htmlFor={this.props.id}>{this.props.labelText}</label>\n            </div>\n        );\n    }\n}\n\nexport default Checkbox;\n","import React from 'react';\n\nexport const SOUNDS = [\n    { name: 'chime', file: 'chime.mp3' },\n    { name: 'ping', file: 'ping.wav' },\n    { name: 'alert', file: 'alert.wav' },\n    { name: 'echo', file: 'echo.wav' },\n]\n\nclass Checkbox extends React.Component {\n\n    playSound() {\n        this.props.audioObject.play();\n    }\n\n    render() {\n        const options = SOUNDS.map(o => <option key={o.file} value={o.file}>{o.name}</option>)\n\n        return (\n            <div className=\"select-wrapper\">\n                <select \n                    value={this.props.value}\n                    id={this.props.id}\n                    name={this.props.inputName}\n                    disabled={this.props.isDisabled}\n                    onChange={this.props.onChange} \n                >\n                    {options}\n                </select>\n                <label htmlFor={this.props.id}>{this.props.labelText}</label>\n                <button disabled={this.props.isDisabled} onClick={() => this.playSound()}>Preview</button>\n            </div>\n        );\n    }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport './Timer.scss';\nimport worker from \"../workers/timer-worker.js\";\nimport WebWorker from \"../workers/worker-setup.js\";\nimport Checkbox from './Checkbox.js';\nimport SoundSelector, { SOUNDS } from './SoundSelector.js';\n\nconst SECONDS_IN_MINUTE = 60;\nexport const TIMER_SCREEN_TIME = 10;\nexport const TIMER_BREAK_TIME = 5;\n\nclass Timer extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const newWorker = new WebWorker(worker);\n        const notificationsPermitted = Notification.permission === 'granted';\n        const soundFileName = SOUNDS[0].file;\n\n        newWorker.addEventListener('message', (e) => this.handleTimerEvent(e));\n\n        this.state = {\n            worker: newWorker,\n            mode: 'stopped',\n            remainingTicks: TIMER_SCREEN_TIME,\n            displayNotifications: notificationsPermitted,\n            playSound: true,\n            soundFileName,\n            audioObject: this.getAudioObject(soundFileName)\n        }\n    }\n\n    getAudioObject(soundFileName) {\n        return new Audio(`./media/${soundFileName}`);\n    }\n\n    handleTimerEvent(e) {\n        this.setState(e.data);\n        document.title = e.data.mode === 'stopped' ? '20-20-20 Rule' : `${Math.ceil(this.state.remainingTicks / SECONDS_IN_MINUTE)} minutes`;\n\n        if (this.state.remainingTicks === 0) {\n            if (this.state.displayNotifications) {\n                const message = this.state.mode === 'screenTime' ? 'Look away from your screen for 20 seconds.' : 'Break complete.';\n                new Notification(message);\n            }\n\n            if (this.state.playSound) {\n                this.state.audioObject.play();\n            }\n        }\n    }\n\n    startTimer() {\n        const message = {\n            mode: 'start',\n            timerScreenTimeTicks: TIMER_SCREEN_TIME,\n            timerBreakTimeTicks: TIMER_BREAK_TIME\n        };\n\n        this.state.worker.postMessage(message);\n    }\n\n    stopTimer() {\n        this.state.worker.postMessage('stop');\n    }\n\n    onDisplayNotificationsChange(event) {\n        if (event.target.checked && Notification.permission !== 'granted') {\n            Notification.requestPermission().then((permission) => {\n                if (permission === 'granted') {\n                    this.setState({ displayNotifications: event.target.checked });\n                }\n                else {\n                    alert('You must allow notification to use this feature.')\n                    this.setState({ displayNotifications: false });\n                }\n            });\n        }\n\n        this.setState({ displayNotifications: event.target.checked });\n    }\n\n    onPlaySoundChange(event) {\n        this.setState({ playSound: event.target.checked });\n    }\n\n    onChangeSound(event) {\n        const soundFileName = event.target.value;\n\n        this.setState({ \n            soundFileName,\n            audioObject: this.getAudioObject(soundFileName)\n        });\n    }\n\n    render() {\n        const total = this.state.mode === 'screenTime' ? TIMER_SCREEN_TIME : TIMER_BREAK_TIME;\n        const percentComplete = this.state.remainingTicks / total * 100;\n        const seconds = this.state.remainingTicks % SECONDS_IN_MINUTE;\n        const minutes = Math.floor(this.state.remainingTicks / SECONDS_IN_MINUTE);\n\n        return (\n            <div className=\"timer row\">\n                <div className=\"donut-chart col\">\n                    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"donut\">\n                        <circle className=\"donut-hole\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\"></circle>\n                        <circle className=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#FFFFFF22\" strokeWidth=\"5\"></circle>\n\n                        <circle className=\"donut-segment\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#FFFFFFAA\" strokeWidth=\"5\" strokeDasharray={`${100 - percentComplete} ${percentComplete}`} strokeDashoffset=\"25\"></circle>\n                    </svg>\n                    <div className=\"timer-status\">\n                        <div className=\"count-down\">{`${minutes}:${('0' + seconds).slice(-2)}`}</div>\n                        { this.state.mode === 'stopped' \n                            ? <button onClick={() => this.startTimer()}>Start</button>\n                            : <button onClick={() => this.stopTimer()}>Stop</button>\n                        }\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <h3>Options</h3>\n                    <Checkbox \n                        labelText=\"Display Notifications\" \n                        inputName=\"displayNotifications\" \n                        id=\"displayNotifications\"\n                        isChecked={this.state.displayNotifications}\n                        onChange={(e) => this.onDisplayNotificationsChange(e)}\n                    />\n                    <Checkbox \n                        labelText=\"Play Sound\" \n                        inputName=\"playSound\" \n                        id=\"playSound\"\n                        isChecked={this.state.playSound}\n                        onChange={(e) => this.onPlaySoundChange(e)}\n                    />\n                    <div className=\"sound-selector\">\n                        <SoundSelector \n                            value={this.state.soundFile} \n                            isDisabled={!this.state.playSound}\n                            audioObject={this.state.audioObject}\n                            onChange={(e) => this.onChangeSound(e)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Timer;\n","import React from 'react';\nimport './About.scss';\n\nclass About extends React.Component {\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col\">\n                    <h3>How to Use this Site</h3>\n                    <p>Computer Vision Syndom (CVS) describes the symptoms associated with prolonged computer, phone, and other digital device use. Common symptoms are eyestrain, headaches, blurred vision, and dry eyes.</p>\n                    <p>Periodically looking away from your screen to relax your eyes can help reduce the frequency of symptoms.</p>\n                    <p>Simply press start and go back to doing what you were doing. You'll get a notification when it time to look away from your screen and another notification when the break is over.</p>\n                </div>\n                <div className=\"col\">\n                    <h3>Does this Actually Help?</h3>\n                    <p>The <a href=\"https://www.aoa.org/documents/infographics/SYVM2016Infographics.pdf\">American Optomietric Association</a>, <a href=\"https://opto.ca/health-library/the-20-20-20-rule\">Canadian Association of Optometrists</a>, and <a href=\"https://www.aao.org/eye-health/tips-prevention/computer-usage\">American Academy of Ophthalmology</a> all recommend using this method to reduce eye strain.</p>\n                    <p><a href=\"https://www.nepjol.info/index.php/NEPJOPH/article/view/8707\">A study</a> involving 795 students between the ages of 18 and 25 found that looking at far away objects in-between work was significantly (p=0.0008) associated with lower frequency of CVS symptoms. </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default About;\n","import React from 'react';\nimport Timer from './components/Timer';\nimport About from './components/About';\nimport './App.scss';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Prevent Computer Eye Strain with the 20-20-20 Rule</h1>\n        <h2>Every <em>20</em> minutes of screen time look at least <em>20</em> feet away for <em>20</em> seconds</h2>\n        <Timer /> \n        <About />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}