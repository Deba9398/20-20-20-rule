{"version":3,"sources":["workers/timer-worker.js","workers/worker-setup.js","components/Checkbox.js","components/SoundSelector.js","components/Timer.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["timer_worker","tickBreakTime","self","remainingTicks","postUpdateMessage","clearInterval","countdown","setupScreenTimeCountdown","tickScreenTime","timerBreakTimeTicks","mode","setInterval","timerScreenTimeTicks","postMessage","addEventListener","e","data","WebWorker","worker","Object","classCallCheck","this","code","toString","blob","Blob","Worker","URL","createObjectURL","Checkbox","react_default","a","createElement","className","disabled","props","isDisabled","id","name","inputName","type","title","checked","isChecked","onChange","htmlFor","labelText","React","Component","SOUNDS","file","VOLUMES","audioObject","play","_this","options","map","o","key","value","volumeOptions","soundFileName","onSoundFileChange","soundVolume","onVolumeChange","colSpan","onClick","playSound","TIMER_SCREEN_TIME","Timer","possibleConstructorReturn","getPrototypeOf","call","newWorker","notificationsPermitted","Notification","permission","automaticallyStart","localStorage","getItem","displayNotifications","handleTimerEvent","state","getAudioObject","startTimer","Audio","concat","setState","document","getWindowTitle","message","minutesRemaining","Math","floor","setItem","event","_this2","target","requestPermission","then","setNotificationsEnabled","alert","isEnabled","volume","_this3","total","percentComplete","seconds","minutes","width","height","viewBox","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","slice","stopTimer","components_Checkbox","onAutomaticallyStartChange","onDisplayNotificationsChange","onPlaySoundChange","components_SoundSelector","onChangeSoundFile","onChangeVolume","About","href","App","src_components_Timer","src_components_About","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2958ce5.chunk.js","sourcesContent":["/* eslint-disable */\nexport default () => {\n    function tickBreakTime() {\n        self.remainingTicks--;\n        postUpdateMessage();\n\n        if (self.remainingTicks === 0) {\n            clearInterval(self.countdown);\n            setupScreenTimeCountdown();\n        }\n    }\n\n    function tickScreenTime() {\n        self.remainingTicks--;\n        postUpdateMessage();\n\n        if (self.remainingTicks === 0) {\n            clearInterval(self.countdown);\n            setupBreakTimeCountdown();\n        }\n    }\n\n    function stop() {\n        clearInterval(self.countdown);\n        self.mode = 'stopped';\n        self.remainingTicks = self.timerScreenTimeTicks;\n    }\n\n    function setupBreakTimeCountdown() {\n        self.remainingTicks = self.timerBreakTimeTicks;\n        self.mode = 'break';\n        self.countdown = setInterval(tickBreakTime, 1000);\n    }\n\n    function setupScreenTimeCountdown() {\n        self.remainingTicks = self.timerScreenTimeTicks;\n        self.mode = 'screenTime';\n        self.countdown = setInterval(tickScreenTime, 1000);\n    }\n\n    function postUpdateMessage() {\n        self.postMessage({\n            mode: self.mode,\n            remainingTicks: self.remainingTicks\n        });\n    }\n\n    self.addEventListener(\n        \"message\",\n        function (e) {\n            if (e.data.mode === 'start') {\n                self.timerScreenTimeTicks = e.data.timerScreenTimeTicks;\n                self.timerBreakTimeTicks = e.data.timerBreakTimeTicks;\n                setupScreenTimeCountdown();\n            }\n            else {\n                stop();\n            }\n\n            postUpdateMessage();\n        },\n        false\n    );\n\n};\n","export default class WebWorker {\n    constructor(worker) {\n      const code = worker.toString();\n      const blob = new Blob([\"(\" + code + \")()\"]);\n      return new Worker(URL.createObjectURL(blob));\n    }\n  }","import React from 'react';\n\nclass Checkbox extends React.Component {\n\n    render() {\n        return (\n            <div className=\"checkbox-wrapper\" disabled={this.props.isDisabled}>\n                <input\n                    id={this.props.id}\n                    name={this.props.inputName}\n                    type=\"checkbox\"\n                    title={this.props.title}\n                    disabled={this.props.isDisabled}\n                    checked={this.props.isChecked}\n                    onChange={this.props.onChange} \n                />\n                <label \n                    htmlFor={this.props.id}\n                    title={this.props.title}\n                >\n                    {this.props.labelText}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport './SoundSelector.scss';\n\nexport const SOUNDS = [\n    { name: 'chime', file: 'chime.mp3' },\n    { name: 'ping', file: 'ping.wav' },\n    { name: 'alert', file: 'alert.wav' },\n    { name: 'echo', file: 'echo.wav' },\n]\n\nexport const VOLUMES = [ 100, 90, 80, 70, 60, 50, 40, 30, 20, 10 ];\n\nclass Checkbox extends React.Component {\n\n    playSound() {\n        this.props.audioObject.play();\n    }\n\n    render() {\n        const options = SOUNDS.map(o => <option key={o.file} value={o.file}>{o.name}</option>);\n        const volumeOptions = VOLUMES.map(o => <option key={o} value={o}>{o}%</option>)\n\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>\n                            <label htmlFor=\"soundSelect\">Sound</label>\n                        </td>\n                        <td>\n                            <select \n                                value={this.props.soundFileName}\n                                id=\"soundSelect\"\n                                name=\"soundSelect\"\n                                disabled={this.props.isDisabled}\n                                onChange={this.props.onSoundFileChange} \n                            >\n                                {options}\n                            </select>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <label htmlFor=\"soundVolume\">Volume</label>\n                        </td>\n                        <td>\n                            <select \n                                value={this.props.soundVolume}\n                                id=\"soundVolume\"\n                                name=\"soundVolume\"\n                                disabled={this.props.isDisabled}\n                                onChange={this.props.onVolumeChange} \n                            >\n                                {volumeOptions}\n                            </select>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td colSpan='2'>\n                            <div>\n                                <button disabled={this.props.isDisabled} onClick={() => this.playSound()}>Preview</button>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport './Timer.scss';\nimport worker from \"../workers/timer-worker.js\";\nimport WebWorker from \"../workers/worker-setup.js\";\nimport Checkbox from './Checkbox.js';\nimport SoundSelector, { SOUNDS } from './SoundSelector.js';\n\nconst SECONDS_IN_MINUTE = 60;\nexport const TIMER_SCREEN_TIME = 20 * SECONDS_IN_MINUTE;\nexport const TIMER_BREAK_TIME = 20;\n\nclass Timer extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const newWorker = new WebWorker(worker);\n        const notificationsPermitted = Notification.permission === 'granted';\n        const automaticallyStart = localStorage.getItem('automaticallyStart') === 'true';\n        const displayNotifications = localStorage.getItem('displayNotifications') === 'true' && notificationsPermitted;\n        const playSound = (localStorage.getItem('playSound') || 'true') === 'true';\n        const soundVolume = localStorage.getItem('soundVolume') || 100;\n        const soundFileName = localStorage.getItem('soundFileName') || SOUNDS[0].file;\n\n        newWorker.addEventListener('message', (e) => this.handleTimerEvent(e));\n\n        this.state = {\n            worker: newWorker,\n            mode: 'stopped',\n            remainingTicks: TIMER_SCREEN_TIME,\n            automaticallyStart,\n            displayNotifications,\n            playSound,\n            soundFileName,\n            soundVolume,\n            audioObject: this.getAudioObject(soundFileName)\n        }\n\n        if (automaticallyStart) {\n            this.startTimer();\n        }\n    }\n\n    getAudioObject(soundFileName) {\n        return new Audio(`./media/${soundFileName}`);\n    }\n\n    handleTimerEvent(e) {\n        this.setState(e.data);\n        document.title = this.getWindowTitle();\n\n        if (this.state.remainingTicks === 0) {\n            if (this.state.displayNotifications) {\n                const message = this.state.mode === 'screenTime' ? 'Look away from your screen for 20 seconds.' : 'Break complete.';\n                new Notification(message);\n            }\n\n            if (this.state.playSound) {\n                this.state.audioObject.play();\n            }\n        }\n    }\n\n    getWindowTitle() {\n        const mode = this.state.mode;\n\n        if (mode === 'stopped') {\n           return '20-20-20 Rule';\n        }\n\n        if (mode === 'break') {\n            return 'Break time';\n        }\n\n        const minutesRemaining = Math.floor(this.state.remainingTicks / SECONDS_IN_MINUTE);\n        return minutesRemaining > 0 ? `${minutesRemaining} ${minutesRemaining > 1 ? 'minutes' : 'minute'}` : 'Less than 1 minute';\n    }\n\n    startTimer() {\n        const message = {\n            mode: 'start',\n            timerScreenTimeTicks: TIMER_SCREEN_TIME,\n            timerBreakTimeTicks: TIMER_BREAK_TIME\n        };\n\n        this.state.worker.postMessage(message);\n    }\n\n    stopTimer() {\n        this.state.worker.postMessage('stop');\n    }\n\n    setNotificationsEnabled(displayNotifications) {\n        localStorage.setItem('displayNotifications', displayNotifications);\n        this.setState({ displayNotifications });\n    }\n\n    onDisplayNotificationsChange(event) {\n        if (event.target.checked && Notification.permission !== 'granted') {\n            Notification.requestPermission().then((permission) => {\n                if (permission === 'granted') {\n                    this.setNotificationsEnabled(event.target.checked);\n                }\n                else {\n                    alert('You must allow notification to use this feature.')\n                    this.setNotificationsEnabled(false);\n                }\n            });\n        }\n\n        this.setNotificationsEnabled(event.target.checked);\n    }\n\n    onAutomaticallyStartChange(event) {\n        const isEnabled = event.target.checked;\n\n        localStorage.setItem('automaticallyStart', isEnabled);\n        this.setState({ automaticallyStart: isEnabled });\n    }\n\n    onPlaySoundChange(event) {\n        const isEnabled = event.target.checked;\n\n        localStorage.setItem('playSound', isEnabled);\n        this.setState({ playSound: isEnabled });\n    }\n\n    onChangeSoundFile(event) {\n        const soundFileName = event.target.value;\n\n        localStorage.setItem('soundFileName', soundFileName);\n\n        this.setState({ \n            soundFileName,\n            audioObject: this.getAudioObject(soundFileName)\n        });\n    }\n\n    onChangeVolume(event) {\n        const soundVolume = event.target.value;\n\n        localStorage.setItem('soundVolume', soundVolume);\n\n        const audioObject = this.state.audioObject;\n        audioObject.volume = soundVolume / 100;\n\n        this.setState({ soundVolume });\n    }\n\n    render() {\n        const total = this.state.mode === 'screenTime' ? TIMER_SCREEN_TIME : TIMER_BREAK_TIME;\n        const percentComplete = this.state.remainingTicks / total * 100;\n        const seconds = this.state.remainingTicks % SECONDS_IN_MINUTE;\n        const minutes = Math.floor(this.state.remainingTicks / SECONDS_IN_MINUTE);\n\n        return (\n            <div className=\"timer row\">\n                <div className=\"donut-chart col\">\n                    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"donut\">\n                        <circle className=\"donut-hole\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\"></circle>\n                        <circle className=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#FFFFFF22\" strokeWidth=\"5\"></circle>\n\n                        <circle className=\"donut-segment\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#FFFFFFAA\" strokeWidth=\"5\" strokeDasharray={`${100 - percentComplete} ${percentComplete}`} strokeDashoffset=\"25\"></circle>\n                    </svg>\n                    <div className=\"timer-status\">\n                        <div className=\"count-down\">{`${minutes}:${('0' + seconds).slice(-2)}`}</div>\n                        { this.state.mode === 'stopped' \n                            ? <button onClick={() => this.startTimer()}>Start</button>\n                            : <button onClick={() => this.stopTimer()}>Stop</button>\n                        }\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <h3>Options</h3>\n                    <Checkbox \n                        labelText=\"Automatically Start on Page Load\" \n                        inputName=\"automaticallyStart\" \n                        id=\"automaticallyStart\"\n                        title=\"Automatically start the timer when this page is opened.\"\n                        isChecked={this.state.automaticallyStart}\n                        onChange={(e) => this.onAutomaticallyStartChange(e)}\n                    />\n                    <Checkbox \n                        labelText=\"Display Notifications\" \n                        inputName=\"displayNotifications\" \n                        id=\"displayNotifications\"\n                        title=\"Display a browser notification when it's time for a break and when the break is over.\"\n                        isChecked={this.state.displayNotifications}\n                        onChange={(e) => this.onDisplayNotificationsChange(e)}\n                    />\n                    <Checkbox \n                        labelText=\"Play Sound\" \n                        inputName=\"playSound\" \n                        id=\"playSound\"\n                        title=\"Play a sound when it's time for a break and when the break is over.\"\n                        isChecked={this.state.playSound}\n                        onChange={(e) => this.onPlaySoundChange(e)}\n                    />\n                    <div className=\"sound-selector\">\n                        <SoundSelector \n                            soundFileName={this.state.soundFileName} \n                            soundVolume={this.state.soundVolume}\n                            isDisabled={!this.state.playSound}\n                            audioObject={this.state.audioObject}\n                            onSoundFileChange={(e) => this.onChangeSoundFile(e)}\n                            onVolumeChange={(e) => this.onChangeVolume(e)}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Timer;\n","import React from 'react';\nimport './About.scss';\n\nclass About extends React.Component {\n    render() {\n        return (\n            <div className=\"about row\">\n                <div className=\"col\">\n                    <h3>How to Use this Site</h3>\n                    <p>Computer Vision Syndom (CVS) describes the symptoms associated with prolonged computer, phone, and other digital device use. Common symptoms are eyestrain, headaches, blurred vision, and dry eyes.</p>\n                    <p>Periodically looking away from your screen to relax your eyes can help reduce the frequency of symptoms.</p>\n                    <p>Simply press start and go back to doing what you were doing. You'll get a notification when it time to look away from your screen and another notification when the break is over.</p>\n                </div>\n                <div className=\"col\">\n                    <h3>Does this Actually Help?</h3>\n                    <p>The <a href=\"https://www.aoa.org/documents/infographics/SYVM2016Infographics.pdf\">American Optomietric Association</a>, <a href=\"https://opto.ca/health-library/the-20-20-20-rule\">Canadian Association of Optometrists</a>, and <a href=\"https://www.aao.org/eye-health/tips-prevention/computer-usage\">American Academy of Ophthalmology</a> all recommend using this method to reduce eye strain.</p>\n                    <p><a href=\"https://www.nepjol.info/index.php/NEPJOPH/article/view/8707\">A study</a> involving 795 students between the ages of 18 and 25 found that looking at far away objects in-between work was significantly (p=0.0008) associated with lower frequency of CVS symptoms. </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default About;\n","import React from 'react';\nimport Timer from './components/Timer';\nimport About from './components/About';\nimport './App.scss';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Prevent Computer Eye Strain with the 20-20-20 Rule</h1>\n        <h2>Every <em>20</em> minutes of screen time look at least <em>20</em> feet away for <em>20</em> seconds</h2>\n        <Timer /> \n        <About />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}