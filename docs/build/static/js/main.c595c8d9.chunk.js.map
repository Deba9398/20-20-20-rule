{"version":3,"sources":["workers/timer-worker.js","workers/worker-setup.js","components/Timer.js","components/NotificationsRequest.js","App.js","serviceWorker.js","index.js"],"names":["timer_worker","tickBreakTime","self","remainingTicks","console","log","postUpdateMessage","Notification","clearInterval","countdown","setupScreenTimeCountdown","tickScreenTime","mode","setInterval","postMessage","addEventListener","e","data","WebWorker","worker","Object","classCallCheck","this","code","toString","blob","Blob","Worker","URL","createObjectURL","Timer","props","_this","possibleConstructorReturn","getPrototypeOf","call","newWorker","setState","document","title","concat","Math","ceil","state","formatter","Intl","RelativeTimeFormat","localeMatcher","number","style","_this2","total","seconds","minutes","react_default","a","createElement","className","width","height","viewBox","class","cx","cy","r","fill","stroke","stroke-width","stroke-dasharray","stroke-dashoffset","slice","onClick","startTimer","stopTimer","React","Component","NotificationsRequest","enableNotifications","App","notificationsEnabled","permission","requestPermission","then","_this3","src_components_Timer","components_NotificationsRequest","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c595c8d9.chunk.js","sourcesContent":["/* eslint-disable */\nexport default () => {\n    function tickBreakTime() {\n        self.remainingTicks--;\n        console.log(self.remainingTicks);\n        postUpdateMessage();\n\n        if (self.remainingTicks === 0) {\n            new Notification('Break complete.');\n            clearInterval(self.countdown);\n            setupScreenTimeCountdown();\n        }\n    }\n\n    function tickScreenTime() {\n        self.remainingTicks--;\n        console.log(self.remainingTicks);\n        postUpdateMessage();\n\n        if (self.remainingTicks === 0) {\n            new Notification('Look away from the screen for 20 seconds.');\n            clearInterval(self.countdown);\n            setupBreakTimeCountdown();\n        }\n    }\n\n    function stop() {\n        clearInterval(self.countdown);\n        self.mode = 'stopped';\n        self.remainingTicks = 20 * 60;\n    }\n\n    function setupBreakTimeCountdown() {\n        self.remainingTicks = 20;\n        self.mode = 'break';\n        self.countdown = setInterval(tickBreakTime, 1000);\n    }\n\n    function setupScreenTimeCountdown() {\n        self.remainingTicks = 20 * 60; // 20 minutes.\n        self.mode = 'screenTime';\n        self.countdown = setInterval(tickScreenTime, 1000);\n    }\n\n    function postUpdateMessage() {\n        self.postMessage({\n            mode: self.mode,\n            remainingTicks: self.remainingTicks\n        });\n    }\n\n    self.addEventListener(\n        \"message\",\n        function (e) {\n            if (e.data === 'start') {\n                setupScreenTimeCountdown();\n            }\n            else {\n                stop();\n            }\n\n            postUpdateMessage();\n        },\n        false\n    );\n\n};\n","export default class WebWorker {\n    constructor(worker) {\n      const code = worker.toString();\n      const blob = new Blob([\"(\" + code + \")()\"]);\n      return new Worker(URL.createObjectURL(blob));\n    }\n  }","import React from 'react';\nimport './Timer.css';\nimport worker from \"../workers/timer-worker.js\";\nimport WebWorker from \"../workers/worker-setup.js\";\n\nclass Timer extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        const newWorker = new WebWorker(worker);\n\n        newWorker.addEventListener('message', (e) => {\n            this.setState(e.data);\n            document.title = e.data.mode === 'stopped' ? '20-20-20 Rule' : `${Math.ceil(this.state.remainingTicks / 60)} minutes`;\n            console.log('Message from Worker: ' + e.data);\n        });\n\n        this.state = {\n            worker: newWorker,\n            formatter: new Intl.RelativeTimeFormat(\"en\", {localeMatcher: 'best fit', number: 'always', 'style': 'short' }),\n            mode: 'stopped',\n            remainingTicks: 20 * 60\n        }\n    }\n\n    startTimer() {\n        this.state.worker.postMessage('start');\n    }\n\n    stopTimer() {\n        this.state.worker.postMessage('stop');\n    }\n\n    render() {\n        const total = this.state.remainingTicks / (60 * 20) * 100;\n        const seconds = this.state.remainingTicks % 60;\n        const minutes = (this.state.remainingTicks - seconds) / 60;\n\n        return (\n            <div className=\"timer\">\n                <div className=\"donut-chart\">\n                    <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"donut\">\n                        <circle class=\"donut-hole\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\"></circle>\n                        <circle class=\"donut-ring\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#FFFFFF22\" stroke-width=\"5\"></circle>\n\n                        <circle class=\"donut-segment\" cx=\"21\" cy=\"21\" r=\"15.91549430918954\" fill=\"transparent\" stroke=\"#FFFFFFAA\" stroke-width=\"5\" stroke-dasharray={`${100 - total} ${total}`} stroke-dashoffset=\"25\"></circle>\n                    </svg>\n                    <span className=\"count-down\">{`${minutes}:${('0' + seconds).slice(-2)}`}</span>\n                </div>\n\n                { this.state.mode === 'stopped' \n                ? <button onClick={() => this.startTimer()}>Start</button>\n                : <button onClick={() => this.stopTimer()}>Stop</button>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Timer;\n","import React from 'react';\n\nclass NotificationsRequest extends React.Component {\n    render() {\n        return (\n            <div>\n                <h3>You must have nofications enabled to use this website.</h3>\n                <button onClick={() => this.props.enableNotifications()}>ENABLE</button>\n            </div>\n        );\n    }\n}\n\nexport default NotificationsRequest;\n","import React from 'react';\nimport Timer from './components/Timer';\nimport './App.css';\nimport NotificationsRequest from './components/NotificationsRequest';\n\nclass App extends React.Component {\n\n  state = {\n    notificationsEnabled: Notification.permission === 'granted'\n  }\n\n  enableNotifications() {\n    Notification.requestPermission().then((permission) => {\n      this.setState({\n        notificationsEnabled: permission === 'granted'\n      });\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Prevent Computer Eye Strain with the 20-20-20 Rule</h1>\n        <h2>Every <em>20</em> minutes of screen time look at least <em>20</em> feet away for <em>20</em> seconds</h2>\n\n        { this.state.notificationsEnabled \n          ? <Timer /> \n          : <NotificationsRequest enableNotifications={() => this.enableNotifications()}/> \n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}